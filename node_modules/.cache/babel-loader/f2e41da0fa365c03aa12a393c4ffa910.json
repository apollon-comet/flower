{"ast":null,"code":"import api from '../utils/api';\nimport { setAlert } from './alert';\nimport { REGISTER_SUCCESS, REGISTER_FAIL, USER_LOADED, AUTH_ERROR, LOGIN_SUCCESS, LOGIN_FAIL, LOGOUT } from './types';\n\n/*\n  NOTE: we don't need a config object for axios as the\n default headers in axios are already Content-Type: application/json\n also axios stringifies and parses JSON for you, so no need for \n JSON.stringify or JSON.parse\n*/\n\n// Load User\nexport const loadUser = () => async dispatch => {\n  try {\n    const res = await api.get('/auth');\n    dispatch({\n      type: USER_LOADED,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: AUTH_ERROR\n    });\n  }\n};\n\n// Register User\nexport const register = formData => async dispatch => {\n  try {\n    const res = await api.post('/users', formData);\n    dispatch({\n      type: REGISTER_SUCCESS,\n      payload: res.data\n    });\n    dispatch(loadUser());\n  } catch (err) {\n    const errors = err.response.data.errors;\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\n    }\n    dispatch({\n      type: REGISTER_FAIL\n    });\n  }\n};\n\n// Login User\nexport const login = (email, password) => async dispatch => {\n  const body = {\n    email,\n    password\n  };\n  try {\n    const res = await api.post('/auth', body);\n    dispatch({\n      type: LOGIN_SUCCESS,\n      payload: res.data\n    });\n    dispatch(loadUser());\n  } catch (err) {\n    const errors = err.response.data.errors;\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\n    }\n    dispatch({\n      type: LOGIN_FAIL\n    });\n  }\n};\n\n// Logout\nexport const logout = () => ({\n  type: LOGOUT\n});","map":{"version":3,"names":["api","setAlert","REGISTER_SUCCESS","REGISTER_FAIL","USER_LOADED","AUTH_ERROR","LOGIN_SUCCESS","LOGIN_FAIL","LOGOUT","loadUser","dispatch","res","get","type","payload","data","err","register","formData","post","errors","response","forEach","error","msg","login","email","password","body","logout"],"sources":["D:/Developing/frontend/React/Devconnector/client/src/actions/auth.js"],"sourcesContent":["import api from '../utils/api';\nimport { setAlert } from './alert';\nimport {\n  REGISTER_SUCCESS,\n  REGISTER_FAIL,\n  USER_LOADED,\n  AUTH_ERROR,\n  LOGIN_SUCCESS,\n  LOGIN_FAIL,\n  LOGOUT\n} from './types';\n\n/*\n  NOTE: we don't need a config object for axios as the\n default headers in axios are already Content-Type: application/json\n also axios stringifies and parses JSON for you, so no need for \n JSON.stringify or JSON.parse\n*/\n\n// Load User\nexport const loadUser = () => async (dispatch) => {\n  try {\n    const res = await api.get('/auth');\n\n    dispatch({\n      type: USER_LOADED,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: AUTH_ERROR\n    });\n  }\n};\n\n// Register User\nexport const register = (formData) => async (dispatch) => {\n  try {\n    const res = await api.post('/users', formData);\n\n    dispatch({\n      type: REGISTER_SUCCESS,\n      payload: res.data\n    });\n    dispatch(loadUser());\n  } catch (err) {\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach((error) => dispatch(setAlert(error.msg, 'danger')));\n    }\n\n    dispatch({\n      type: REGISTER_FAIL\n    });\n  }\n};\n\n// Login User\nexport const login = (email, password) => async (dispatch) => {\n  const body = { email, password };\n\n  try {\n    const res = await api.post('/auth', body);\n\n    dispatch({\n      type: LOGIN_SUCCESS,\n      payload: res.data\n    });\n\n    dispatch(loadUser());\n  } catch (err) {\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach((error) => dispatch(setAlert(error.msg, 'danger')));\n    }\n\n    dispatch({\n      type: LOGIN_FAIL\n    });\n  }\n};\n\n// Logout\nexport const logout = () => ({ type: LOGOUT });\n"],"mappings":"AAAA,OAAOA,GAAG,MAAM,cAAc;AAC9B,SAASC,QAAQ,QAAQ,SAAS;AAClC,SACEC,gBAAgB,EAChBC,aAAa,EACbC,WAAW,EACXC,UAAU,EACVC,aAAa,EACbC,UAAU,EACVC,MAAM,QACD,SAAS;;AAEhB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,OAAO,MAAMC,QAAQ,GAAGA,CAAA,KAAM,MAAOC,QAAQ,IAAK;EAChD,IAAI;IACF,MAAMC,GAAG,GAAG,MAAMX,GAAG,CAACY,GAAG,CAAC,OAAO,CAAC;IAElCF,QAAQ,CAAC;MACPG,IAAI,EAAET,WAAW;MACjBU,OAAO,EAAEH,GAAG,CAACI;IACf,CAAC,CAAC;EACJ,CAAC,CAAC,OAAOC,GAAG,EAAE;IACZN,QAAQ,CAAC;MACPG,IAAI,EAAER;IACR,CAAC,CAAC;EACJ;AACF,CAAC;;AAED;AACA,OAAO,MAAMY,QAAQ,GAAIC,QAAQ,IAAK,MAAOR,QAAQ,IAAK;EACxD,IAAI;IACF,MAAMC,GAAG,GAAG,MAAMX,GAAG,CAACmB,IAAI,CAAC,QAAQ,EAAED,QAAQ,CAAC;IAE9CR,QAAQ,CAAC;MACPG,IAAI,EAAEX,gBAAgB;MACtBY,OAAO,EAAEH,GAAG,CAACI;IACf,CAAC,CAAC;IACFL,QAAQ,CAACD,QAAQ,CAAC,CAAC,CAAC;EACtB,CAAC,CAAC,OAAOO,GAAG,EAAE;IACZ,MAAMI,MAAM,GAAGJ,GAAG,CAACK,QAAQ,CAACN,IAAI,CAACK,MAAM;IAEvC,IAAIA,MAAM,EAAE;MACVA,MAAM,CAACE,OAAO,CAAEC,KAAK,IAAKb,QAAQ,CAACT,QAAQ,CAACsB,KAAK,CAACC,GAAG,EAAE,QAAQ,CAAC,CAAC,CAAC;IACpE;IAEAd,QAAQ,CAAC;MACPG,IAAI,EAAEV;IACR,CAAC,CAAC;EACJ;AACF,CAAC;;AAED;AACA,OAAO,MAAMsB,KAAK,GAAGA,CAACC,KAAK,EAAEC,QAAQ,KAAK,MAAOjB,QAAQ,IAAK;EAC5D,MAAMkB,IAAI,GAAG;IAAEF,KAAK;IAAEC;EAAS,CAAC;EAEhC,IAAI;IACF,MAAMhB,GAAG,GAAG,MAAMX,GAAG,CAACmB,IAAI,CAAC,OAAO,EAAES,IAAI,CAAC;IAEzClB,QAAQ,CAAC;MACPG,IAAI,EAAEP,aAAa;MACnBQ,OAAO,EAAEH,GAAG,CAACI;IACf,CAAC,CAAC;IAEFL,QAAQ,CAACD,QAAQ,CAAC,CAAC,CAAC;EACtB,CAAC,CAAC,OAAOO,GAAG,EAAE;IACZ,MAAMI,MAAM,GAAGJ,GAAG,CAACK,QAAQ,CAACN,IAAI,CAACK,MAAM;IAEvC,IAAIA,MAAM,EAAE;MACVA,MAAM,CAACE,OAAO,CAAEC,KAAK,IAAKb,QAAQ,CAACT,QAAQ,CAACsB,KAAK,CAACC,GAAG,EAAE,QAAQ,CAAC,CAAC,CAAC;IACpE;IAEAd,QAAQ,CAAC;MACPG,IAAI,EAAEN;IACR,CAAC,CAAC;EACJ;AACF,CAAC;;AAED;AACA,OAAO,MAAMsB,MAAM,GAAGA,CAAA,MAAO;EAAEhB,IAAI,EAAEL;AAAO,CAAC,CAAC"},"metadata":{},"sourceType":"module"}