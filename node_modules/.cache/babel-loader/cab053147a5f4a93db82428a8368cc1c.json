{"ast":null,"code":"import { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport rootReducer from './reducers';\nimport setAuthToken from './utils/setAuthToken';\nconst initialState = {};\nconst middleware = [thunk];\nconst store = createStore(rootReducer, initialState, composeWithDevTools(applyMiddleware(...middleware)));\n\n/*\n  NOTE: set up a store subscription listener\n  to store the users token in localStorage\n */\n\n/*\n  initialize current state from redux store for subscription comparison\n  preventing undefined error\n */\nlet currentState = store.getState();\nstore.subscribe(() => {\n  // keep track of the previous and current state to compare changes\n  let previousState = currentState;\n  currentState = store.getState();\n  // if the token changes set the value in localStorage and axios headers\n  if (previousState.auth.token !== currentState.auth.token) {\n    const token = currentState.auth.token;\n    setAuthToken(token);\n  }\n});\nexport default store;","map":{"version":3,"names":["createStore","applyMiddleware","composeWithDevTools","thunk","rootReducer","setAuthToken","initialState","middleware","store","currentState","getState","subscribe","previousState","auth","token"],"sources":["D:/Developing/frontend/React/Devconnector/client/src/store.js"],"sourcesContent":["import { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport rootReducer from './reducers';\nimport setAuthToken from './utils/setAuthToken';\n\nconst initialState = {};\n\nconst middleware = [thunk];\n\nconst store = createStore(\n  rootReducer,\n  initialState,\n  composeWithDevTools(applyMiddleware(...middleware))\n);\n\n/*\n  NOTE: set up a store subscription listener\n  to store the users token in localStorage\n */\n\n/*\n  initialize current state from redux store for subscription comparison\n  preventing undefined error\n */\nlet currentState = store.getState();\n\nstore.subscribe(() => {\n  // keep track of the previous and current state to compare changes\n  let previousState = currentState;\n  currentState = store.getState();\n  // if the token changes set the value in localStorage and axios headers\n  if (previousState.auth.token !== currentState.auth.token) {\n    const token = currentState.auth.token;\n    setAuthToken(token);\n  }\n});\n\nexport default store;\n"],"mappings":"AAAA,SAASA,WAAW,EAAEC,eAAe,QAAQ,OAAO;AACpD,SAASC,mBAAmB,QAAQ,0BAA0B;AAC9D,OAAOC,KAAK,MAAM,aAAa;AAC/B,OAAOC,WAAW,MAAM,YAAY;AACpC,OAAOC,YAAY,MAAM,sBAAsB;AAE/C,MAAMC,YAAY,GAAG,CAAC,CAAC;AAEvB,MAAMC,UAAU,GAAG,CAACJ,KAAK,CAAC;AAE1B,MAAMK,KAAK,GAAGR,WAAW,CACvBI,WAAW,EACXE,YAAY,EACZJ,mBAAmB,CAACD,eAAe,CAAC,GAAGM,UAAU,CAAC,CACpD,CAAC;;AAED;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,IAAIE,YAAY,GAAGD,KAAK,CAACE,QAAQ,CAAC,CAAC;AAEnCF,KAAK,CAACG,SAAS,CAAC,MAAM;EACpB;EACA,IAAIC,aAAa,GAAGH,YAAY;EAChCA,YAAY,GAAGD,KAAK,CAACE,QAAQ,CAAC,CAAC;EAC/B;EACA,IAAIE,aAAa,CAACC,IAAI,CAACC,KAAK,KAAKL,YAAY,CAACI,IAAI,CAACC,KAAK,EAAE;IACxD,MAAMA,KAAK,GAAGL,YAAY,CAACI,IAAI,CAACC,KAAK;IACrCT,YAAY,CAACS,KAAK,CAAC;EACrB;AACF,CAAC,CAAC;AAEF,eAAeN,KAAK"},"metadata":{},"sourceType":"module"}